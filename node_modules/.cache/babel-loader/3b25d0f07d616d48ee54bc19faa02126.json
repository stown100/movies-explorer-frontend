{"ast":null,"code":"export const BASE_URL = 'http://localhost:3000'; // https://myfilms.nomoredomains.rocks/api\n\nconst handleResponse = res => {\n  if (res.ok) {\n    return res.json();\n  } // если ошибка, отклоняем промис\n\n\n  return Promise.reject(`Ошибка: ${res.status}`);\n};\n\nexport const register = (name, email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      email,\n      password\n    })\n  }).then(handleResponse).then(res => {\n    return res;\n  });\n};\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(handleResponse).then(data => {\n    if (data) {\n      localStorage.setItem('jwt', data.jwt);\n      return data;\n    } else {\n      return;\n    }\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(handleResponse).then(data => data);\n};","map":{"version":3,"sources":["C:/Users/СерхиоРобертоКарлос/Yandex-praktikum/Diplom/movies-explorer-frontend/src/utils/Auth.js"],"names":["BASE_URL","handleResponse","res","ok","json","Promise","reject","status","register","name","email","password","fetch","method","headers","body","JSON","stringify","then","login","data","localStorage","setItem","jwt","getContent","token"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAjB,C,CACP;;AAEA,MAAMC,cAAc,GAAIC,GAAD,IAAS;AAC5B,MAAIA,GAAG,CAACC,EAAR,EAAY;AACR,WAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,GAH2B,CAI5B;;;AACA,SAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,EAArC,CAAP;AACH,CAND;;AAQA,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AAC/C,SAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAb,EAAuB;AAC/Ba,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAf;AALyB,GAAvB,CAAL,CAOFO,IAPE,CAOGjB,cAPH,EAQFiB,IARE,CAQIhB,GAAD,IAAS;AACX,WAAOA,GAAP;AACH,GAVE,CAAP;AAWH,CAZM;AAcP,OAAO,MAAMiB,KAAK,GAAG,CAACT,KAAD,EAAQC,QAAR,KAAqB;AACtC,SAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAb,EAAuB;AAC/Ba,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AALyB,GAAvB,CAAL,CAOFO,IAPE,CAOGjB,cAPH,EAQFiB,IARE,CAQIE,IAAD,IAAU;AACZ,QAAIA,IAAJ,EAAU;AACNC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BF,IAAI,CAACG,GAAjC;AACA,aAAOH,IAAP;AACH,KAHD,MAGO;AACH;AACH;AACJ,GAfE,CAAP;AAgBH,CAjBM;AAmBP,OAAO,MAAMI,UAAU,GAAIC,KAAD,IAAW;AACjC,SAAOb,KAAK,CAAE,GAAEZ,QAAS,WAAb,EAAyB;AACjCa,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,UAASW,KAAM;AAF5B;AAFwB,GAAzB,CAAL,CAOFP,IAPE,CAOGjB,cAPH,EAQFiB,IARE,CAQGE,IAAI,IAAIA,IARX,CAAP;AASH,CAVM","sourcesContent":["export const BASE_URL = 'http://localhost:3000';\r\n// https://myfilms.nomoredomains.rocks/api\r\n\r\nconst handleResponse = (res) => {\r\n    if (res.ok) {\r\n        return res.json();\r\n    }\r\n    // если ошибка, отклоняем промис\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\nexport const register = (name, email, password) => {\r\n    return fetch(`${BASE_URL}/signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ name, email, password })\r\n    })\r\n        .then(handleResponse)\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n};\r\n\r\nexport const login = (email, password) => {\r\n    return fetch(`${BASE_URL}/signin`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n    })\r\n        .then(handleResponse)\r\n        .then((data) => {\r\n            if (data) {\r\n                localStorage.setItem('jwt', data.jwt);\r\n                return data;\r\n            } else {\r\n                return;\r\n            }\r\n        })\r\n};\r\n\r\nexport const getContent = (token) => {\r\n    return fetch(`${BASE_URL}/users/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": `Bearer ${token}`\r\n        },\r\n    })\r\n        .then(handleResponse)\r\n        .then(data => data)\r\n}"]},"metadata":{},"sourceType":"module"}